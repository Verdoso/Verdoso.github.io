<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>versioning on GreenEyed's</title><link>https://www.greeneyed.org/tags/versioning/</link><description>Recent content in versioning on GreenEyed's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Sep 2019 16:15:34 +0000</lastBuildDate><atom:link href="https://www.greeneyed.org/tags/versioning/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot JSON API versioning options</title><link>https://www.greeneyed.org/post/spring-boot-json-api-versioning/</link><pubDate>Mon, 09 Sep 2019 16:15:34 +0000</pubDate><guid>https://www.greeneyed.org/post/spring-boot-json-api-versioning/</guid><description>One of the common issues when developing an API specification is how to deal with API contract modifications. Hopefully one is very successful and has lots of customers with software clients already using the current version of the spec. so simply dropping the existing version and moving to the new one is not an option, hence the issue.
Spring Boot, with its automatic JSON mapping with Jackson, is a very productive framework to develop APIs, but one still has to face the problem on how to adapt the code to support several API versions with the same code base.</description></item></channel></rss>