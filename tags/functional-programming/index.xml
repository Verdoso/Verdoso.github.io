<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on GreenEyed's</title><link>https://www.greeneyed.org/tags/functional-programming/</link><description>Recent content in Functional Programming on GreenEyed's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Jun 2018 18:13:25 +0200</lastBuildDate><atom:link href="https://www.greeneyed.org/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Real life Java: Aggregating nested collection with streams</title><link>https://www.greeneyed.org/post/real-life-java-aggregating-nested-collection-with-streams/</link><pubDate>Fri, 08 Jun 2018 18:13:25 +0200</pubDate><guid>https://www.greeneyed.org/post/real-life-java-aggregating-nested-collection-with-streams/</guid><description>Most of the times I had used the “relatively new” streams in Java, it was for straight-forward tasks with operations on one stream. I sometimes use more sophisticated collectors, like Collectors.toMap, but recently I had to use more complicated stuff to solve a real problem and I thought it might interesting writing about it, as the examples one usually reads about are synthetic and lack the focus of solving a real problem.</description></item></channel></rss>