<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>virtual threads on GreenEyed's</title><link>https://www.greeneyed.org/tags/virtual-threads/</link><description>Recent content in virtual threads on GreenEyed's</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 02 Dec 2022 13:45:03 +0000</lastBuildDate><atom:link href="https://www.greeneyed.org/tags/virtual-threads/index.xml" rel="self" type="application/rss+xml"/><item><title>On Java (virtual) threads and pools</title><link>https://www.greeneyed.org/post/virtual-threads-part-i/</link><pubDate>Fri, 02 Dec 2022 13:45:03 +0000</pubDate><guid>https://www.greeneyed.org/post/virtual-threads-part-i/</guid><description>Much has already been written about the new feature known as virtual threads, introduced as a preview in Java 19, and about the changes that this feature will enable. Among those, we can find that the new virtual threads are light, as opposed to the regular ones tied to native threads, so there is no need to cache or pool them. So far, so good.
Native threads are considered heavy, so you can create a limited number of them, but virtual threads are light so they are virtually, pun intended, limitless.</description></item></channel></rss>